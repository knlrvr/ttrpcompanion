// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    ownedCamp     Campaign[]    @relation("CampaignOwner")
    joinedCamp    Campaign[]    @relation("CampaignMember")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Campaign {
    id                  String              @id @default(cuid())
    characters          Character[]         // One to many
    owner               User                @relation("CampaignOwner", fields: [ownerId], references: [id])
    ownerId             String              // Foreign key to associate Campaign with Owner
    joined              User                @relation("CampaignMember", fields: [joinedId], references: [id])
    joinedId            String              // Foreign key to associate Campaign with Joined players
}

model Character {
    id                  String              @id @default(cuid())
    campaign            Campaign?           @relation(fields: [campaignId], references: [id])
    campaignId          String?             // Foreign key to associate Character with Campaign
    stats               CharacterStats[]    // One to many
}

model CharacterStats {
    id                  String              @id @default(cuid())
    character           Character           @relation(fields: [characterId], references: [id])
    characterId         String              // Foreign key to associate CharacterStats with Character
    level               Int                 @default(0)
}


