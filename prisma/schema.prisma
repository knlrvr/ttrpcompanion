// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id              String              @id @default(cuid())
    name            String?
    email           String?             @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    characters      Character[]         // One to many

    ownedCamp       Campaign[]          @relation("CampaignOwner")
    joinedCamp      Campaign[]          @relation("CampaignMember")    
}

model Campaign {
    id                  String        @id @default(cuid())
    createdAt           DateTime      @default(now())
    updatedAt           DateTime      @updatedAt
    title               String
    owner               User          @relation("CampaignOwner", fields: [ownerId], references: [id])
    ownerId             String        // Foreign key to associate Campaign with Owner
    members             User[]        @relation("CampaignMember")

    characters          Character[]
    quests              Quests[]
    days                Days[]
}

model Quests {
    id                String       @id @default(cuid())
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    campaign          Campaign[]
    campaignId        String?

    title             String
    body              String

    completed         Boolean

}

model Days {
    id                String      @id @default(cuid())
    campaign          Campaign[]
    campaignId        String?

    totalDays         Int         @default(0)
}

model Character {
    id                  String              @id @default(cuid())
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    title               String
    user                User?               @relation(fields: [userId], references: [id])
    userId              String?             // Foreign key to associate Character with User
    campaign            Campaign?           @relation(fields: [campaignId], references: [id])
    campaignId          String?             // Foreign key to associate Character with Campaign
    stats               CharacterStats[]    // One to many
}

model CharacterStats {
    id                  String              @id @default(cuid())
    character           Character           @relation(fields: [characterId], references: [id], onDelete: Cascade)
    characterId         String              // Foreign key to associate CharacterStats with Character
    level               Int                 @default(0)
    charClass           String
    charRace            String
    totalSessions       Int                 @default(0)
    totalTime           Int                 @default(0)
    dmgDealt            Int                 @default(0)
    dmgTaken            Int                 @default(0)
    critHits            Int                 @default(0)
    totalKills          Int                 @default(0)
    spellsCast          Int                 @default(0)
    totalHealingOthers  Int                 @default(0)
    totalHealingSelf    Int                 @default(0)

    totalDeaths         Int                 @default(0)
    turnsNoDmg          Int                 @default(0)

    // suggested to add
    totalXp             Int                 @default(0)
    combatTime          Int                 @default(0)
    natTwenty           Int                 @default(0)
    natOne              Int                 @default(0)
    totalKo             Int                 @default(0)

}